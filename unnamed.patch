Index: src/sample/Controller.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sample/Controller.java	(date 1557870989867)
+++ src/sample/Controller.java	(date 1557870989867)
@@ -0,0 +1,17 @@
+//package sample;
+//
+//import javafx.fxml.FXML;
+//import javafx.scene.layout.Pane;
+//
+//public class Controller {
+//
+//
+//    @FXML
+//    Pane gamePane;
+//
+//    Controller() {
+//        gamePane = new Pane();
+//    }
+//
+//
+//}
Index: src/sample/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sample/Main.java	(date 1557917052093)
+++ src/sample/Main.java	(date 1557917052093)
@@ -0,0 +1,36 @@
+package sample;
+
+import javafx.application.Application;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Scene;
+import javafx.scene.layout.Pane;
+import javafx.stage.Stage;
+
+public class Main extends Application {
+
+    int gameDifficultyLevel;
+
+    MapControll mapControll;
+
+
+    @Override
+    public void start(Stage primaryStage) throws Exception{
+
+        gameDifficultyLevel = 2;
+
+        mapControll = new MapControll();
+        Pane root = FXMLLoader.load(getClass().getResource("sample.fxml"));
+        mapControll.drawMap(root);
+        mapControll.drawRoad(gameDifficultyLevel);
+
+        primaryStage.setTitle("Hello World");
+        primaryStage.setResizable(false);
+        primaryStage.setScene(new Scene(root));
+
+        primaryStage.show();
+    }
+
+    public static void main(String[] args) {
+        launch(args);
+    }
+}
Index: src/sample/sample.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sample/sample.fxml	(date 1557881409864)
+++ src/sample/sample.fxml	(date 1557881409864)
@@ -0,0 +1,65 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.control.Button?>
+<?import javafx.scene.layout.HBox?>
+<?import javafx.scene.layout.Pane?>
+<?import javafx.scene.layout.StackPane?>
+<?import javafx.scene.layout.VBox?>
+<?import javafx.scene.text.Text?>
+
+<Pane fx:id="gamePane" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/8.0.172-ea" xmlns:fx="http://javafx.com/fxml/1" fx:controller="sample.MapControll">
+   <children>
+      <VBox prefHeight="400.0" prefWidth="220.0" style="-fx-background-color: BROWN;">
+         <children>
+            <StackPane layoutX="10.0" layoutY="10.0" prefHeight="82.0" prefWidth="220.0" style="-fx-background-color: Orange;">
+               <children>
+                  <Text strokeType="OUTSIDE" strokeWidth="0.0" text="JACA TOWER DEFENCE" />
+               </children>
+            </StackPane>
+            <StackPane prefHeight="77.0" prefWidth="220.0">
+               <children>
+                  <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Pinionszki" />
+               </children>
+            </StackPane>
+            <StackPane prefHeight="150.0" prefWidth="200.0">
+               <children>
+                  <HBox prefHeight="100.0" prefWidth="200.0">
+                     <children>
+                        <StackPane prefHeight="100.0" prefWidth="100.0" style="-fx-background-color: GREY;" />
+                        <VBox prefHeight="200.0" prefWidth="100.0">
+                           <children>
+                              <StackPane prefHeight="150.0" prefWidth="200.0">
+                                 <children>
+                                    <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Nazwa" />
+                                 </children>
+                              </StackPane>
+                              <StackPane prefHeight="150.0" prefWidth="200.0">
+                                 <children>
+                                    <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Zycia" />
+                                 </children>
+                              </StackPane>
+                              <StackPane prefHeight="150.0" prefWidth="200.0">
+                                 <children>
+                                    <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Typ" />
+                                 </children>
+                              </StackPane>
+                           </children>
+                        </VBox>
+                     </children>
+                  </HBox>
+               </children>
+            </StackPane>
+            <StackPane prefHeight="150.0" prefWidth="200.0">
+               <children>
+                  <Button mnemonicParsing="false" text="Kup wieze" />
+               </children>
+            </StackPane>
+            <StackPane layoutX="10.0" layoutY="155.0" prefHeight="150.0" prefWidth="200.0">
+               <children>
+                  <Button mnemonicParsing="false" text="Nastepna Fala" />
+               </children>
+            </StackPane>
+         </children>
+      </VBox>
+   </children>
+</Pane>
Index: Tower Defence.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Tower Defence.iml	(date 1557919620637)
+++ Tower Defence.iml	(date 1557919620637)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_8" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" name="lib" level="project" />
+  </component>
+</module>
\ No newline at end of file
Index: src/META-INF/MANIFEST.MF
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/META-INF/MANIFEST.MF	(date 1557919487008)
+++ src/META-INF/MANIFEST.MF	(date 1557919487008)
@@ -0,0 +1,6 @@
+Manifest-Version: 1.0
+Class-Path: src.zip javafx-swt.jar javafx.web.jar javafx.base.jar java
+ fx.fxml.jar javafx.media.jar javafx.swing.jar javafx.controls.jar jav
+ afx.graphics.jar
+Main-Class: sample.Main
+
Index: src/sample/Tile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sample/Tile.java	(date 1557918022178)
+++ src/sample/Tile.java	(date 1557918022178)
@@ -0,0 +1,69 @@
+package sample;
+
+import javafx.scene.paint.Color;
+import javafx.scene.shape.Rectangle;
+
+import java.util.Random;
+
+public class Tile {
+    public Rectangle tileRec;
+    private Color color; //pobawie sie potem w laczenie kolorow
+
+    String[] typeNames; //EMPTY, ROAD, BUILDING,
+    int type;
+
+    int id; //id kafelka na liscie (nie wiem, czy potrzebne)
+
+    private int x; //okresla polozenie kafelka w pixelach
+    private int y;
+
+    private int sizeX;  //rozmiar kafelka w pixelach
+    private int sizeY;
+
+    int idX; //okresla, ktory to kafelek w polozeniu x i y
+    int idY;
+
+
+    Tile(int x, int y, int sizeX, int sizeY, int idX, int idY, int id) {
+        this.id = id;
+
+        this.x = x;
+        this.y = y;
+
+        this.idX = idX;
+        this.idY = idY;
+
+        typeNames = new String[]{"EMPTY", "ROAD", "BULDING"};
+        type = 0;
+
+        this.sizeX = sizeX;
+        this.sizeY = sizeY;
+
+        tileRec = new Rectangle(x, y, sizeX, sizeY);
+        tileChangeType("EMPTY");
+    }
+
+    void tileChangeType(String typeTmp ){
+        if(typeTmp == "EMPTY"){
+            type = 0;
+            tileRec.setFill(Color.rgb(randomBetween(20, 30), randomBetween(150, 170), randomBetween(20, 30)));  //losuje kolor kafelka
+        }
+
+        if(typeTmp == "ROAD"){
+            int tmpColor = randomBetween(170, 190);
+
+            type = 1;
+            tileRec.setFill(Color.rgb(tmpColor,tmpColor,tmpColor));  //losuje kolor kafelka
+        }
+
+    }
+
+
+    private static int randomBetween(int start, int end) {
+        Random random = new Random();
+        int a1 = random.nextInt(end - start + 1);
+        int a2 = a1 + start;
+        return a2;
+    }
+
+}
Index: src/sample/MapControll.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sample/MapControll.java	(date 1557923603393)
+++ src/sample/MapControll.java	(date 1557923603393)
@@ -0,0 +1,204 @@
+package sample;
+
+import javafx.scene.layout.Pane;
+import javafx.scene.paint.Color;
+
+import java.util.LinkedList;
+import java.util.Random;
+
+public class MapControll {
+
+    private static int TILE_SIZE_X = 19;
+    private static int TILE_SIZE_Y = 20;
+
+    //hard
+    private static int TILE_START_POINT_Y_MIN_HARD = 8;
+    private static int TILE_START_POINT_Y_MAX_HARD = 11;
+    private int tileStartPointHard = randomBetween(TILE_START_POINT_Y_MIN_HARD, TILE_START_POINT_Y_MAX_HARD);
+
+
+    LinkedList<Tile> tileList;
+
+    boolean mapEmpty = true;
+
+
+    public MapControll() {
+        tileList = new LinkedList<>();
+    }
+
+    void drawMap(Pane root) {
+        int idtemp = 0;
+        if (mapEmpty) {
+            for (int j = 0; j < 20; j++) { //dodawanie kafelka
+                for (int i = 0; i < 20; i++) {
+                    tileList.add(new Tile((i * TILE_SIZE_X) + 220, j * TILE_SIZE_Y, TILE_SIZE_X, TILE_SIZE_Y, i, j, idtemp));
+                    root.getChildren().add(tileList.get(idtemp).tileRec);
+                    idtemp++;
+                }
+            }
+            mapEmpty = false;
+        }
+    }
+
+    void drawRoad(int gameDifficultyLevel) {
+        if (gameDifficultyLevel == 0) {
+            //do zrobienia pozniej
+        }
+
+        if (gameDifficultyLevel == 1) {
+            //do zrobienia pozniej
+        }
+
+        if (gameDifficultyLevel == 2) {
+
+            for (Tile tile : tileList) {
+                if (tile.idY == tileStartPointHard) {
+                    tile.tileChangeType("ROAD");
+                }
+            }
+
+        }
+
+    }
+
+
+//    void drawRoad(int gameDifficultyLevel) {
+//
+//        switch (gameDifficultyLevel) {
+//            case 1: {
+//                System.out.println("Latwo");
+//                int idStart = 666;
+//                int idstop = 666;
+//
+//                int randYStart = randomBetween(1, 18);
+//                int randYStop = randomBetween(1, 18);
+//
+//                boolean foundStart = false;
+//                boolean foundStop = false;
+//
+//                for (Tile tile : tileList) {
+//                    if (tile.idX == 0 && tile.idY == randYStart) {
+//                        tile.type = 1;
+//                        tile.tileRec.setFill(Color.RED);
+//                        idStart = tile.id;
+//                        foundStart = true;
+//                    }
+//                    if (tile.idX == 19 && tile.idY == randYStop) {
+//                        tile.tileRec.setFill(Color.RED);
+//                        tile.type = 1;
+//                        idstop = tile.id;
+//                        foundStop = true;
+//                    }
+//                    if (foundStart && foundStop) {
+//                        break;
+//                    }
+//                }
+//
+//                for (Tile tile : tileList) {
+//
+//
+//                }
+//
+//                System.out.println("idStart = " + idStart);
+//                System.out.println("idstop = " + idstop);
+//                break;
+//            }
+//
+//            case 2: {
+//                System.out.println("Srednio");
+//                break;
+//            }
+//
+//            case 3: {
+//                System.out.println("Trudno");
+//                int idStart = 666;
+//                int idstop = 666;
+//
+//                int randYStart = randomBetween(1, 1); //LOSOWANIE pozycji startowej
+//                int randYStop = randomBetween(1, 1); //LOSOWANIE pozycji koncowej
+//
+//                boolean foundStart = false;
+//                boolean foundStop = false;
+//
+//                for (Tile tile : tileList) {
+//                    if (tile.idX == 0 && tile.idY == randYStart) {
+//                        tile.type = 1;
+//                        tile.tileRec.setFill(Color.RED);
+//                        idStart = tile.id;
+//                        foundStart = true;
+//                    }
+//                    if (tile.idX == 19 && tile.idY == randYStop) {
+//                        tile.tileRec.setFill(Color.RED);
+//                        tile.type = 1;
+//                        idstop = tile.id;
+//                        foundStop = true;
+//                    }
+//                    if (foundStart && foundStop) {
+//                        break;
+//                    }
+//                }
+//
+//                int tempY = tileList.get(idStart).idY;
+//                int half = randomBetween(10, 10);  //LOSOWANIE gdzie jest srodek
+//
+//                for (int i = 0; i < half; i++) {   //Krok 1, wyznaczanie drogi do polowy
+//                    for (Tile tile : tileList) {
+//                        if (tile.idY == tempY && tile.idX < half) {
+//                            tile.tileRec.setFill(Color.LIGHTGRAY);
+//                            tile.type = 1;
+//                        }
+//                    }
+//                }
+//                int tempXStart = tileList.get(idStart).idX;
+//                int tempXStop = tileList.get(idstop).idX;
+//                int tempXDistance = Math.abs(tempXStart - tempXStop);
+//
+//
+//
+//                if (tileList.get(idStart).idY == tileList.get(idstop).idY) {   //Krok 2 wyznaczanie drogi miedzy drogami
+//                    for (Tile tile : tileList) {
+//                        if (tile.idY == tileList.get(idStart).idY) {
+//                            tile.tileRec.setFill(Color.LIGHTGRAY);
+//                            tile.type = 1;
+//                        }
+//                    }
+//                }
+//                if (tempXStart > tempXStop) {
+//
+//                }
+//                if (tempXStart > tempXStop) {
+//
+//                }
+//
+//
+//                tempY = tileList.get(idstop).idY;
+//                for (int i = 0; i < (20 - half); i++) {   //Krok 3, wyznaczanie drogi do celu koncowego
+//                    for (Tile tile : tileList) {
+//                        if (tile.idY == tempY && tile.idX > half) {
+//                            tile.tileRec.setFill(Color.LIGHTGRAY);
+//                            tile.type = 1;
+//                        }
+//                    }
+//                }
+//
+//                System.out.println("idStart = " + idStart);
+//                System.out.println("idstop = " + idstop);
+//                break;
+//            }
+//
+//            default: {
+//                System.out.println("Nie udalo sie wczytac poziomu trudnosci!");
+//                break;
+//            }
+//        }
+//    }
+
+    static int randomBetween(int start, int end) {
+        Random random = new Random();
+        int a1 = random.nextInt(end - start + 1);
+        int a2 = a1 + start;
+        return a2;
+    }
+
+}
+
